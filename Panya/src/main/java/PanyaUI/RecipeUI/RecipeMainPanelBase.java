/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PanyaUI.RecipeUI;

import PanyaUI.PanyaContentPanel;
import PanyaUI.Theme;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import javax.swing.UIManager;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author dqh
 */
public class RecipeMainPanelBase extends javax.swing.JPanel implements PanyaContentPanel {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    Color primaryColor;
    Color darkColor;
    Color lightColor;
    Color primaryTextColor;
    Color lightTextColor;
    Color darkTextColor;

    /**
     * Chỉnh màu cho window theo phổ màu đưa vào
     * 
     * @param themeName String được lấy từ PanyaUI.Theme.getTheme
     * @see PanyaUI.Theme#getTheme(String)
     */
    public void initTheme(String themeName) {
        var theme = new Theme().getTheme(themeName);
        if (theme == null) {
            return;
        }

        final var PRIMARY = theme.get(Theme.PRIMARY);
        final var LIGHT = theme.get(Theme.LIGHT);
        final var DARK = theme.get(Theme.DARK);

        this.initTheme(PRIMARY, LIGHT, DARK);
    }
    
    /**
     * Set màu cho window theo phổ màu đưa vào. Tham số đưa vào gồm 3 loại màu:
     * chính, nhạt, đậm. Tham khảo tại <a href=
     * "https://material.io/resources/color">https://material.io/resources/color</a>
     * 
     * @param primary
     * @param light
     * @param dark
     */
    public void initTheme(Color primary, Color light, Color dark) {
        if (primary == null || light == null || dark == null) {
            return;
        }
        this.primaryColor = primary;
        this.darkColor = dark;
        this.lightColor = light;

        this.primaryTextColor = Theme.textColorFromBackgroundColor(primary);
        this.darkTextColor = Theme.textColorFromBackgroundColor(dark);
        this.lightTextColor = Theme.textColorFromBackgroundColor(light);

        this.bottomHeaderPanel.setBackground(lightColor);
        this.contentHeaderLabel.setForeground(primaryTextColor);
        this.contentHeaderPanel.setBackground(primaryColor);

        this.publicLabel.setForeground(primaryTextColor);
        this.publicLabel.setBackground(primaryColor);
        this.privateLabel.setForeground(lightTextColor);
        this.privateLabel.setBackground(lightColor);

        this.clearButton.setBackground(primaryColor);
        this.clearButton.setForeground(primaryTextColor);

        this.secretClearButton.setBackground(primaryColor);
        this.secretClearButton.setForeground(primaryTextColor);

        this.addRecipeButton.setBackground(primaryColor);
        this.addRecipeButton.setForeground(primaryTextColor);

        this.addSecretRecipeButton.setBackground(primaryColor);
        this.addSecretRecipeButton.setForeground(primaryTextColor);

    }

    /**
     * Creates new form OuterContentPanel
     */
    public RecipeMainPanelBase() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        contentHeaderPanel = new JPanel();
        contentHeaderLabel = new JLabel();
        bottomHeaderPanel = new JPanel();
        publicLabel = new JLabel();
        privateLabel = new JLabel();
        contentPanel = new JPanel();
        publicPanel = new JPanel();
        jPanel2 = new JPanel();
        searchTextField = new JTextField();
        clearButton = new JButton();
        jScrollPane1 = new JScrollPane();
        recipeTable = new JTable();
        addRecipeButton = new JButton();
        privatePanel = new JPanel();
        jPanel3 = new JPanel();
        secretSearchTextField = new JTextField();
        secretClearButton = new JButton();
        jScrollPane2 = new JScrollPane();
        secretRecipeTable = new JTable();
        addSecretRecipeButton = new JButton();

        setMinimumSize(new Dimension(600, 600));
        setLayout(new GridBagLayout());

        contentHeaderPanel.setBackground(new Color(33, 150, 243));
        contentHeaderPanel.setMinimumSize(new Dimension(600, 100));

        contentHeaderLabel.setFont(new Font("Noto Sans", 0, 17)); // NOI18N
        contentHeaderLabel.setHorizontalAlignment(SwingConstants.CENTER);
        contentHeaderLabel.setText("YOUR RECIPE");

        GroupLayout contentHeaderPanelLayout = new GroupLayout(contentHeaderPanel);
        contentHeaderPanel.setLayout(contentHeaderPanelLayout);
        contentHeaderPanelLayout.setHorizontalGroup(contentHeaderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(contentHeaderLabel, GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        contentHeaderPanelLayout.setVerticalGroup(contentHeaderPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(contentHeaderLabel, GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
        );

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.anchor = GridBagConstraints.PAGE_START;
        gridBagConstraints.weightx = 0.1;
        add(contentHeaderPanel, gridBagConstraints);

        bottomHeaderPanel.setBackground(new Color(110, 198, 255));
        bottomHeaderPanel.setMinimumSize(new Dimension(600, 50));
        bottomHeaderPanel.setPreferredSize(new Dimension(600, 50));
        bottomHeaderPanel.setLayout(new GridBagLayout());

        publicLabel.setBackground(new Color(33, 150, 243));
        publicLabel.setHorizontalAlignment(SwingConstants.CENTER);
        publicLabel.setText("Public");
        publicLabel.setMaximumSize(new Dimension(300, 50));
        publicLabel.setMinimumSize(new Dimension(300, 50));
        publicLabel.setOpaque(true);
        publicLabel.setPreferredSize(new Dimension(300, 50));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        bottomHeaderPanel.add(publicLabel, gridBagConstraints);

        privateLabel.setBackground(new Color(110, 198, 255));
        privateLabel.setHorizontalAlignment(SwingConstants.CENTER);
        privateLabel.setText("Private");
        privateLabel.setMaximumSize(new Dimension(300, 50));
        privateLabel.setMinimumSize(new Dimension(300, 50));
        privateLabel.setOpaque(true);
        privateLabel.setPreferredSize(new Dimension(300, 50));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        bottomHeaderPanel.add(privateLabel, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        add(bottomHeaderPanel, gridBagConstraints);

        contentPanel.setBackground(Color.white);
        contentPanel.setMinimumSize(new Dimension(600, 400));
        contentPanel.setPreferredSize(new Dimension(600, 400));
        contentPanel.setLayout(new CardLayout());

        publicPanel.setLayout(new GridBagLayout());

        jPanel2.setLayout(new GridBagLayout());

        searchTextField.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        searchTextField.setMinimumSize(new Dimension(450, 39));
        searchTextField.setPreferredSize(new Dimension(450, 39));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new Insets(0, 20, 0, 16);
        jPanel2.add(searchTextField, gridBagConstraints);

        clearButton.setText("Clear");
        clearButton.setMaximumSize(new Dimension(100, 40));
        clearButton.setPreferredSize(new Dimension(100, 40));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipady = 8;
        gridBagConstraints.insets = new Insets(0, 0, 0, 20);
        jPanel2.add(clearButton, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new Insets(25, 0, 10, 0);
        publicPanel.add(jPanel2, gridBagConstraints);

        recipeTable.setAutoCreateRowSorter(true);
        recipeTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID                  ", "Name", "Note"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        recipeTable.setToolTipText("Double click to a recipe to see the details");
        recipeTable.setColumnSelectionAllowed(false);
        recipeTable.setMinimumSize(new Dimension(105, 0));
        recipeTable.setPreferredSize(new Dimension(600, 300));
        jScrollPane1.setViewportView(recipeTable);
        // if (recipeTable.getColumnModel().getColumnCount() > 0) {
        //     recipeTable.getColumnModel().getColumn(0).setMinWidth(25);
        //     recipeTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        //     recipeTable.getColumnModel().getColumn(0).setMaxWidth(25);
        // }

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new Insets(0, 20, 0, 20);
        publicPanel.add(jScrollPane1, gridBagConstraints);

        addRecipeButton.setText("Add new recipe");
        addRecipeButton.setMaximumSize(new Dimension(300, 40));
        addRecipeButton.setMinimumSize(new Dimension(300, 40));
        addRecipeButton.setPreferredSize(new Dimension(300, 40));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new Insets(10, 0, 10, 0);
        publicPanel.add(addRecipeButton, gridBagConstraints);

        contentPanel.add(publicPanel, "card2");

        privatePanel.setLayout(new GridBagLayout());

        jPanel3.setLayout(new GridBagLayout());

        secretSearchTextField.setFont(new Font("Segoe UI", 0, 18)); // NOI18N
        secretSearchTextField.setMinimumSize(new Dimension(450, 39));
        secretSearchTextField.setPreferredSize(new Dimension(450, 39));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new Insets(0, 20, 0, 16);
        jPanel3.add(secretSearchTextField, gridBagConstraints);

        secretClearButton.setText("Clear");
        secretClearButton.setMaximumSize(new Dimension(100, 40));
        secretClearButton.setMinimumSize(new Dimension(100, 40));
        secretClearButton.setPreferredSize(new Dimension(100, 40));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.insets = new Insets(0, 0, 0, 20);
        jPanel3.add(secretClearButton, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new Insets(25, 0, 10, 0);
        privatePanel.add(jPanel3, gridBagConstraints);

        secretRecipeTable.setAutoCreateRowSorter(true);
        secretRecipeTable.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Note"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        secretRecipeTable.setToolTipText("Double click to a recipe to see the details");
        jScrollPane2.setViewportView(secretRecipeTable);
        // if (secretRecipeTable.getColumnModel().getColumnCount() > 0) {
        //     secretRecipeTable.getColumnModel().getColumn(0).setMinWidth(25);
        //     secretRecipeTable.getColumnModel().getColumn(0).setPreferredWidth(25);
        //     secretRecipeTable.getColumnModel().getColumn(0).setMaxWidth(25);
        // }

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new Insets(0, 20, 0, 20);
        privatePanel.add(jScrollPane2, gridBagConstraints);

        addSecretRecipeButton.setText("Add new Secret recipe");
        addSecretRecipeButton.setMaximumSize(new Dimension(300, 37));
        addSecretRecipeButton.setMinimumSize(new Dimension(300, 37));
        addSecretRecipeButton.setPreferredSize(new Dimension(300, 37));
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new Insets(10, 0, 10, 0);
        privatePanel.add(addSecretRecipeButton, gridBagConstraints);

        contentPanel.add(privatePanel, "card3");

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        add(contentPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    JButton addRecipeButton;
    JButton addSecretRecipeButton;
    JPanel bottomHeaderPanel;
    JButton clearButton;
    JLabel contentHeaderLabel;
    JPanel contentHeaderPanel;
    JPanel contentPanel;
    JPanel jPanel2;
    JPanel jPanel3;
    JScrollPane jScrollPane1;
    JScrollPane jScrollPane2;
    JLabel privateLabel;
    JPanel privatePanel;
    JLabel publicLabel;
    JPanel publicPanel;
    JTable recipeTable;
    JTextField searchTextField;
    JButton secretClearButton;
    JTable secretRecipeTable;
    JTextField secretSearchTextField;
    // End of variables declaration//GEN-END:variables
}
